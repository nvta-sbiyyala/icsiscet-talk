#+TITLE: Constraint Programming Algorithms in Generative AI
#+AUTHOR: Shishir Biyyala
#+DATE: October 26th, 2024
#+OPTIONS: H:2 toc:t num:t 
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \lstset{basicstyle=\scriptsize, breaklines=true, breakatwhitespace=true}
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: metropolis
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)
# Example from https://orgmode.org/manual/A-Beamer-example.html
# Beamer Themes: https://latex-beamer.com/tutorials/beamer-themes/
#+MACRO: NEWLINE @@latex:\\@@ @@html:<br>@@ @@ascii:NEWLINE_CHARACTERS_FOR_ASCII_EXPORT@@
#+OPTIONS: ^:{}

# #+LATEX_CLASS: beamer
# #+LATEX_CLASS_OPTIONS: [presentation]
# #+BEAMER_THEME: default
# #+OPTIONS: H:2 toc:nil

# * Introduction
# ** Constraint Programming Algorithms in Generative AI
#    - Overview of Constraint Programming (CP)
#    - CP in the larger AI landscape
#    - Focus on algorithms that power intelligent systems

* Constraint Programming (CP)
** What is Constraint Programming?

   - CP is a declarative paradigm used to solve combinatorial problems
   - It involves specifying variables, constraints, and using search algorithms to find solutions
   - Sub-field of AI that intersects with optimization and decision-making

** CP Techniques in Generative AI

    - Constraint Satisfaction Problems (CSPs) and Constraint Optimization Problems (COPs)
    - Techniques like Backtracking, Constraint Propagation, and Local Search
    - How CP is used in structured generation, such as automated scheduling, text generation, and design automation

** Constraint Propagation
    - Constraint Propagation is a key CP technique used to reduce the search space
    - It removes invalid possibilities early in the search, leading to faster solutions
    - Relevance to Generative AI: Helps AI systems make structured decisions in real-time

* Constraint Propagation example
** Conference Scheduling
    - Problem setup: Assign talks to rooms and time slots with constraints
    - Constraint: No overlapping talks in the same room, buffer time between sessions
    - CP approach allows for fast query responses with constraints being propagated

** Conference Scheduling: Setting up the Model
    # - The first step is to create a model in Choco Solver to represent the scheduling problem.
    # - We define variables for talks, rooms, and time slots.
#+ATTR_LATEX: :options \small
#+BEGIN_SRC java :results output :exports both :wrap example :eval never-export
  // Step 1: Create a new model
  Model model = new Model("Conference Scheduling");

  // Step 2: Define variables
  int numTalks = 4; int numRooms = 3; int numSlots = 4;
  // Define variables for rooms and time slots for each talk
  IntVar[] roomAssigns = new IntVar[numTalks];
  IntVar[] slotAssigns = new IntVar[numTalks];
  // Each talk is assigned a room from 0 to numRooms-1
  IntStream.range(0, numTalks).forEachOrdered(i -> {
    roomAssigns[i] = model.intVar("Room"+i,0,numRooms-1);
    slotAssigns[i] = model.intVar("TimeSlot"+i,0,numSlots-1);
  });

#+END_SRC

** Step 2: Adding Constraints - No Overlap in the Same Room
    - Next, we add a constraint to ensure that no two talks in the same room overlap.
    - If two talks are in the same room, they must be in different time slots.

#+BEGIN_SRC java
  IntStream.range(0, numTalks).forEach(i ->
    IntStream.range(i + 1, numTalks).forEach(j ->
      model.ifThen(
        model.arithm(roomAssignments[i],"=",roomAssignments[j]),
        model.arithm(slotAssignments[i],"!=",slotAssignments[j])
      )
    )
  );
#+END_SRC

** Step 3: Adding Constraints - Buffer Time Between Rooms
    - Now, we add a constraint to ensure that talks in different rooms have buffer time between them.
    - This allows attendees to move between rooms.

#+BEGIN_SRC java
IntStream.range(0, numTalks).forEach(i ->
  IntStream.range(i + 1, numTalks).forEach(j ->
    model.ifThen(
      model.arithm(roomAssignments[i],"!=",roomAssignments[j]),
      // Ensure at least 1-time slot difference
      model.distance(slotAssignments[i],slotAssignments[j], ">", 0)
    )
  )
);
#+END_SRC
** Step 4: Solving the Model
    - Finally, we use the solver to find a valid assignment for rooms and time slots.
    - The solver will attempt to find a solution that satisfies all the constraints.

#+BEGIN_SRC java
    Solver solver = model.getSolver();
    if (solver.solve()) {
        for (int i = 0; i < numTalks; i++) {
            System.out.println("Talk " + i + " assigned to Room " + roomAssignments[i].getValue() +
                    " at TimeSlot " + timeSlotAssignments[i].getValue());
        }
    } else {
        System.out.println("No valid schedule found!");
    }
#+END_SRC

** Applying CP to Real-World Systems
    - Constraint Propagation in intelligent systems, such as scheduling, resource allocation, and logistics
    - CP's power to handle complex rules while enabling fast, reliable solutions in Generative AI systems
    - Applications in areas like supply chain optimization, AI-driven design, and autonomous decision-making

** Conclusion
    - Summary: CP is a powerful tool for solving complex problems in AI
    - Constraint Propagation allows for rapid, efficient query handling in Generative AI
    - Invitation to explore more use cases and applications of CP in intelligent systems

* Q&A
